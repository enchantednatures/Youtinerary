[package]
name = "youtinerary"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[profile.dev]
opt-level = 1 
split-debuginfo = "unpacked"

[profile.dev.package.sqlx-macros]
opt-level = 3

[dependencies]
anyhow = "1"
async-session = "3.0"
axum-extra = { version="0.9", optional = true, features = ["typed-header"] }
axum-tracing-opentelemetry = "0.16.0"
chrono = { version = "0.4", features = ["serde"] }
chrono-tz = { version = "0.8", features = ["serde"] }
config = { version = "0.14",optional = true, default-features = false, features = ["yaml"] }
console_error_panic_hook = { version = "0.1"}
console_log = { version = "1"}
gloo-net = "0.5"
headers = "0.4"
http = "1"
hyper = { version = "1", features = ["server"] }
init-tracing-opentelemetry = { version = "0.16.0", features = [ "otlp", "tracing_subscriber_ext", ] }
itertools = "0.13"
leptos = { version = "0.6", features = ["csr", "nightly"] }
leptos-use = { version = "0.10", optional = true , features = ["serde", "serde_json" ] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["csr", "nightly"] }
leptos_router = { version = "0.6", features = ["csr", "nightly"] }
log = "0.4"
oauth2 = "4.4"
opentelemetry = { version = "0.21", features = ["trace"] }
opentelemetry-otlp = { version = "0.14" , features = ["tonic", "default"] }
opentelemetry-stdout = { version = "0.2", features = ["trace"] }
opentelemetry_sdk = {version="0.21" , features = ["rt-tokio"] }
redis = { version = "0.24",optional = true ,features = ["tokio-comp"] }
reqwest = {version = "0.11", features = ["json"]}
serde = { version = "1.0", features = ["derive"] }
serde_json = "1"
sqlx = { version = "0.7",optional = true, features = ["runtime-tokio-native-tls", "postgres",  "chrono", "uuid" ] }
thiserror = "1"
tokio = {version="1.35", optional = true, features = ["rt-multi-thread"]}
tower = { version = "0.4", optional = true, features = ["util"] }
tower-http = { version = "0.5",optional = true, features = ["fs", "trace", "cors"] }
tracing = {version = "0.1", optional = true }
tracing-opentelemetry = "0.22"
tracing-opentelemetry-instrumentation-sdk =  { version = "0.16.0" }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
uuid = { version = "1.6", features = ["serde", "v4"] }
wasm-bindgen = { version = "0.2" }


[dependencies.axum]
version = "0.7"
optional = true
features = [ "json", "multipart", "tracing", "ws"]


[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:tracing",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "{{project-name}}"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
